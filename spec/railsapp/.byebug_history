c
klass.find(ids).to_a
klass.find(ids)
ids
c
klass.find(ids)
ids << { bypass: true }
ids
klass.find(["dtiC", "dth_", "dtaN"]).index_by { |r| r.id }
klass.find(["dtiC", "dth_", "dtaN"])
klass.find(ids)
ids
c
klass.where(reflection.association_primary_key => [1, 2, 3]).values_at(*[1, 2, 3]).compact
klass.where(reflection.association_primary_key => [1, 2, 3]).values_at(*[1, 2, 3])
klass.where(reflection.association_primary_key => [1, 2, 3]).values_at(*ids)
klass.where(reflection.association_primary_key => [1, 2, 3])
reflection.association_primary_key
c
new_ids
c
Car.all.map(&:to_param)
ids
new_ids
c
klass.name
klass.has_encrypted_id?
klass
ids
puts reflection.source_reflection_name
puts reflection.source_reflection_name.to_s.classify.safe_constantize.has_encrypted_id?
c
puts reflection.source_reflection_name.to_s.classify.safe_constantize.new._reflections.keys
puts reflection.source_reflection_name.to_s.classify.safe_constantize.new._reflections
puts reflection.source_reflection_name.to_s.classify.safe_constantize.new.association
puts reflection.source_reflection_name.to_s.classify.safe_constantize.new.methods.sort
puts reflection.source_reflection_name.to_s.classify.safe_constantize.new.reflect_on_all_associations
puts reflection.source_reflection_name.to_s.classify.safe_constantize.new.associations
puts reflection.source_reflection_name.to_s.classify.safe_constantize.associations
puts reflection.source_reflection_name.to_s.classify.safe_constantize
puts reflection.source_reflection_name.to_s.classify
puts reflection.source_reflection_name.classify
puts reflection.source_reflection_name
puts reflection.to_yaml
reflection.name
reflection
